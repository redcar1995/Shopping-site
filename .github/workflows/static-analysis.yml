
name: "Static Analysis"

on:
    pull_request:
        branches:
            - "[0-9]+.[0-9]+"
            - "[0-9]+.x"
    push:
        branches:
            - "[0-9]+.[0-9]+"
            - "[0-9]+.x"
            - "*_actions"

env:
    PIMCORE_PROJECT_ROOT: ${{ github.workspace }}
    APP_ENV: test
    PIMCORE_TEST: 1
    PIMCORE_STORAGE: 'local'

jobs:
    static-analysis-phpstan:
        name: "Static Analysis with PHPStan"
        runs-on: "ubuntu-20.04"
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            matrix:
                include:
                    - { php-version: "8.0", dependencies: "lowest", experimental: false, symfony: "" }
                    - { php-version: "8.0", dependencies: "highest", experimental: false, symfony: "" }
                    - { php-version: "8.0", dependencies: "highest", experimental: true, symfony: "5.4.x-dev" }

        steps:
            - name: "Checkout code"
              uses: "actions/checkout@v2"

            - name: "Install PHP"
              uses: "shivammathur/setup-php@v2"
              with:
                  coverage: "none"
                  php-version: "${{ matrix.php-version }}"

            - name: "Setup Pimcore environment"
              run: |
                  .github/ci/scripts/setup-pimcore-environment.sh

            - name: "Copy models"
              run: "cp -rv .github/ci/files/var ."

            - name: "Set Symfony version constraint in composer.json"
              env:
                  SYMFONY_VERSION: "${{ matrix.symfony }}"
              run: |
                  if [ ! -z "$SYMFONY_VERSION" ]; then
                    .github/ci/scripts/symfony-require-dev.sh
                  fi

            - name: "Install dependencies with Composer"
              uses: "ramsey/composer-install@v1"
              with:
                  dependency-versions: "${{ matrix.dependencies }}"

            - name: "Secure original baseline"
              run: "cp phpstan-baseline.neon phpstan-baseline-original.neon"


            - name: "Generate baseline"
              run: |
                set +e
                vendor/bin/phpstan analyse --memory-limit=-1 --generate-baseline
                set -e

            - name: "Dump generated baseline with phpstan/phpstan"
              run: "cat phpstan-baseline.neon"

            - name: "Restore original baseline"
              run: "cp phpstan-baseline-original.neon phpstan-baseline.neon"

            - name: "Run a static analysis with phpstan/phpstan"
              run: "vendor/bin/phpstan analyse --memory-limit=-1"
